#!/bin/bash
########################################################################################################################
# This script is able to install ROSE on a clean CentOS-6 machine, configuring ROSE for binary analysis
# (--enable-languages=binaries) along with a number of software packages that increase the feature set of the binary
# analysis.
#
# Prerequisite steps:
#
#  1. Create a new CentOS-6 machine, such as an AWS machine with a CentOS-6 AMI such as "CentOS 6 (x86_64) with Updates
#     HVM". The machine should be large enough, such as m4.4xlarge (16 CPUs, 64 GiB RAM).
#
#     For some reason, for an AWS CentOS-6 AMI, it doesn't work to enlarge the root file system before launching this
#     instance, so instead, attach a separate volume with at least 40 GiB of storage and run these commands after you've
#     logged in the first time on this type of machine:
#
#       # Extra commands for AWS machines with broken automtic growing of root filesystem
#      	sudo fdisk /dev/xvdb  (then enter "n RET p RET 1 RET RET RET w RET")
#      	sudo mke2fs /dev/xvdb1
#      	sudo mount /dev/xvdb1 /mnt
#      	sudo chown centos:centos /mnt
#      	mkdir /mnt/tmp
#      	export TMPDIR=/mnt/tmp
#      	mkdir /mnt/.spock
#      	ln -s /mnt/.spock ~/.spock
#      	mkdir /mnt/rose-installed
#      	ln -s /mnt/rose-installed ~/rose-installed
#      	cd /mnt
#
#  2. Run "sudo yum -y install git"
#
#  3. Optionally copy Megachiropteran and/or ESTCP source code into the "megachiropteran" and "estcp-software"
#     directories. They will be built and installed if present.
#
#  4. Run "git clone https://github.com/matzke1/rose-installers"
#
#  5. Run "./rose-installers/install-binaryanalysis-centos6"
#
# If this script fails part way through, it's often possible to make adjustments to the system and then re-run this
# script after commenting out the steps at the end that have already been completed.
#
########################################################################################################################
set -e
arg0="${0##*/}"
dir0="${0%/*}"

. "${dir0}/impl/binaryanalysis-installation-support.sh"
export PATH="$HOME/.spock/bin:$PATH"

# These instructions come from https://rosecompiler.atlassian.net/wiki/x/vwBhF
install-system-dependencies() {
    (
	set -x
	sudo yum -y update
	sudo yum -y install wget tar cmake java-1.8.0-openjdk-devel python-devel graphviz gcc-c++ flex bison \
	     bzip2 zlib-devel libtool libtool-ltdl-devel byacc libgcrypt-devel xz \
	     fuse fuse-devel passwd fontconfig mesa-libGLU git pcre-devel patch glibc-static libstdc++-static \
	     libstdc++-devel.i686 ncurses-devel.i686 sudo postgresql-devel ghostscript
    )

    while ! which scl; do
	# Often fails the first time it runs, so just try a few times
	sleep 5
	(set -x; sudo yum -y install centos-release-scl devtoolset-7)
    done

    (
	set -x

	# The Z3 installation needs Python-3 for its build system
	sudo yum -y install rh-python36

	# Tup needs to be able to mount filesystems with FUSE
	sudo chmod 4755 /bin/fusermount
 
	# The following lines are needed for 7z if you're building binary releases of ROSE software
	wget https://www.mirrorservice.org/sites/dl.fedoraproject.org/pub/epel/6/x86_64/Packages/p/p7zip-16.02-10.el6.x86_64.rpm
	wget https://www.mirrorservice.org/sites/dl.fedoraproject.org/pub/epel/6/x86_64/Packages/p/p7zip-plugins-16.02-10.el6.x86_64.rpm

	# These commands fail if the package is already installed. They can fail for other reasons, but we can't distinguish.
	sudo rpm -U --quiet p7zip-16.02-10.el6.x86_64.rpm || true
	sudo rpm -U --quiet p7zip-plugins-16.02-10.el6.x86_64.rpm || true
	rm -f p7zip-16.02-10.el6.x86_64.rpm p7zip-plugins-16.02-10.el6.x86_64.rpm
    )
}

# Some systems require extra commands to be run in each shell.
# These instructions come from https://rosecompiler.atlassian.net/wiki/x/vwBhF
run() {
    (
	set -x
	scl enable devtoolset-7 rh-python36 -- "$@"
    )
}

choose-rose-dependencies() {
    rm -rf rose/_build
    mkdir rose/_build

    compilers="$(run spock-ls -1 gnu-compilers |sort -r |head -1),default-c,default-c++"

    (
	set -x

	# patchelf-0.10 doesn't compile here, but 0.9 does.
	run spock-shell --with patchelf-0.9 --install true

	# The system installed CMake is too old for yamlcpp and Z3, so we use one that RMC/Spock installs.
	# sqlite cannot be built from source because fossil is not available on this system (errors during download)
	# jq cannot be built with such an old version of GNU autotools (errors during configuration)
	# The postgresql library (pqxx) can't be built on such an old system (errors from the C++ compiler)
	(cd rose/_build && BUILD=tup CMAKE=3.13 SQLITE=none JQ=none PQXX=none run rmc init --project=binaries --batch ..)
    )
}

########################################################################################################################

check-hardware-requirements
install-system-dependencies
install-rmc-spock
get-rose-source-code
choose-rose-dependencies
install-rose-dependencies
create-automake-files
configure-rose
build-test-install-rose
conditionally-install-megachiropteran
conditionally-install-estcp
build-binary-release
compress-binary-release
